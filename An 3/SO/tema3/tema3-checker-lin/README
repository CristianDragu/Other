#
#  3 - Virtual Memory (Linux)
#
#  2016, Operating Systems
#

# Archive:

> README
	* this file

> Makefile.checker
	* Makefile for automating the build process on Linux

> run_all.sh
	* script to run all tests defined in vmsim_test.c on Linux

> vmsim.h
	* vmsim library interface

> vmsim_test.c
	* actual implementation of the test suite
	* OS independent

> vmsim_test.h
	* declaration of test functions with OS specific implementation
	* specific to the test suite

> vmsim_test_lin.c
	* Linux specific implementation of generic interface

> common.h
	* declaration of wrapped OS specific structures
	* declaration of useful functions with OS specific implementation
	* generic calls usually related to file I/O

> common_lin.c
	* Linux specific implementation of generic interface

> run_test.h
	* useful macros for testing

> debug.h
	* debugging macros

> util.h
	* useful macros for generic use (error processing)

# Build:

The local directory must contain the vmsim library (libvmsim.so).
Use the Makefile.checker to properly build the run_test executable:

	make -f Makefile.checker

This command will also run all tests and print out the results.

# Run:

In order to run the test suite you can either use the run_all.sh script or
the run_test executable. The loader must be able to locate the library
(libscheduler.so) (use LD_LIBRARY_PATH).

The run_all.sh script runs all tests and computes assignment grade (90 points
maximum):

	LD_LIBRARY_PATH=. ./run_all.sh

In order to run a specific test, pass the test number (1 .. 20) to the run_test
executable:

	LD_LIBRARY_PATH=. ./_test/run_test 1

# Tests:

Tests are basically unit tests. A single function in the test_fun_array (see
vmsim_test.c) is called each time the vimsim_test executable is invoked,
testing a single functionality (and assuming previous tests have been run and
passed).

Each test function follows the unit test pattern: initialization, action,
evaluation.

# Debug:

The debug.h header file consists of several macros useful for debugging
(dprintf, dlog). There are multiple uses of these macros throughout the above
files.

In order to turn debug messages on, you must define the DEBUG macro, either in
a header file, or, I suggest, in the Makefile. The LOG_LEVEL macro limits the
log message types that are to be printed, by default LOG_WARNING (see enum in
debug.h). You may redefine it in a header file or in the Makefile.

Rapid enabling of debug messages is achieved by commenting out the CPPFLAGS
line in the Makefile. It turns on debugging and enabled all log messages
(LOG_DEBUG).

